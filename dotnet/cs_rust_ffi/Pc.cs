// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: pc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from pc.proto</summary>
public static partial class PcReflection {

  #region Descriptor
  /// <summary>File descriptor for pc.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PcReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CghwYy5wcm90byLFAwoLUGF0aWVudENhc2USCgoCaWQYASABKAkSEAoIYWdl",
          "WWVhcnMYAiABKAUSDwoHYWdlRGF5cxgDIAEoBRIRCgliaXJ0aERhdGUYBCAB",
          "KA0SDwoHYWRtRGF0ZRgFIAEoDRIPCgdzZXBEYXRlGAYgASgNEhEKCWxlYXZl",
          "RGF5cxgHIAEoBRILCgNzZXgYCCABKAkSCwoDYWRtGAkgASgJEgsKA3NlcBgK",
          "IAEoCRIPCgdnZXN0YWdlGAsgASgFEgsKA2xvcxgMIAEoBRILCgNobXYYDSAB",
          "KAUSCgoCYmgYDiABKAgSKQoJZGlhZ25vc2VzGA8gAygLMhYuUGF0aWVudENh",
          "c2UuRGlhZ25vc2lzEioKCnByb2NlZHVyZXMYECADKAsyFi5QYXRpZW50Q2Fz",
          "ZS5Qcm9jZWR1cmUaGQoJRGlhZ25vc2lzEgwKBGNvZGUYASABKAkabwoJUHJv",
          "Y2VkdXJlEgwKBGNvZGUYASABKAkSDAoEZGF0ZRgCIAEoBRIpCgRzaWRlGAMg",
          "ASgOMhsuUGF0aWVudENhc2UuUHJvY2VkdXJlLlNpZGUiGwoEU2lkZRIFCgFM",
          "EAASBQoBUhABEgUKAUIQAiI9CgZSZXN1bHQSCwoDZHJnGAEgASgJEgsKA21k",
          "YxgCIAEoCRIMCgRwY2NsGAMgASgNEgsKA2dzdBgEIAEoDWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PatientCase), global::PatientCase.Parser, new[]{ "Id", "AgeYears", "AgeDays", "BirthDate", "AdmDate", "SepDate", "LeaveDays", "Sex", "Adm", "Sep", "Gestage", "Los", "Hmv", "Bh", "Diagnoses", "Procedures" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::PatientCase.Types.Diagnosis), global::PatientCase.Types.Diagnosis.Parser, new[]{ "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PatientCase.Types.Procedure), global::PatientCase.Types.Procedure.Parser, new[]{ "Code", "Date", "Side" }, null, new[]{ typeof(global::PatientCase.Types.Procedure.Types.Side) }, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::Result), global::Result.Parser, new[]{ "Drg", "Mdc", "Pccl", "Gst" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class PatientCase : pb::IMessage<PatientCase> {
  private static readonly pb::MessageParser<PatientCase> _parser = new pb::MessageParser<PatientCase>(() => new PatientCase());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PatientCase> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PcReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PatientCase() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PatientCase(PatientCase other) : this() {
    id_ = other.id_;
    ageYears_ = other.ageYears_;
    ageDays_ = other.ageDays_;
    birthDate_ = other.birthDate_;
    admDate_ = other.admDate_;
    sepDate_ = other.sepDate_;
    leaveDays_ = other.leaveDays_;
    sex_ = other.sex_;
    adm_ = other.adm_;
    sep_ = other.sep_;
    gestage_ = other.gestage_;
    los_ = other.los_;
    hmv_ = other.hmv_;
    bh_ = other.bh_;
    diagnoses_ = other.diagnoses_.Clone();
    procedures_ = other.procedures_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PatientCase Clone() {
    return new PatientCase(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ageYears" field.</summary>
  public const int AgeYearsFieldNumber = 2;
  private int ageYears_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AgeYears {
    get { return ageYears_; }
    set {
      ageYears_ = value;
    }
  }

  /// <summary>Field number for the "ageDays" field.</summary>
  public const int AgeDaysFieldNumber = 3;
  private int ageDays_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AgeDays {
    get { return ageDays_; }
    set {
      ageDays_ = value;
    }
  }

  /// <summary>Field number for the "birthDate" field.</summary>
  public const int BirthDateFieldNumber = 4;
  private uint birthDate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BirthDate {
    get { return birthDate_; }
    set {
      birthDate_ = value;
    }
  }

  /// <summary>Field number for the "admDate" field.</summary>
  public const int AdmDateFieldNumber = 5;
  private uint admDate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AdmDate {
    get { return admDate_; }
    set {
      admDate_ = value;
    }
  }

  /// <summary>Field number for the "sepDate" field.</summary>
  public const int SepDateFieldNumber = 6;
  private uint sepDate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SepDate {
    get { return sepDate_; }
    set {
      sepDate_ = value;
    }
  }

  /// <summary>Field number for the "leaveDays" field.</summary>
  public const int LeaveDaysFieldNumber = 7;
  private int leaveDays_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeaveDays {
    get { return leaveDays_; }
    set {
      leaveDays_ = value;
    }
  }

  /// <summary>Field number for the "sex" field.</summary>
  public const int SexFieldNumber = 8;
  private string sex_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Sex {
    get { return sex_; }
    set {
      sex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "adm" field.</summary>
  public const int AdmFieldNumber = 9;
  private string adm_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Adm {
    get { return adm_; }
    set {
      adm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sep" field.</summary>
  public const int SepFieldNumber = 10;
  private string sep_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Sep {
    get { return sep_; }
    set {
      sep_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gestage" field.</summary>
  public const int GestageFieldNumber = 11;
  private int gestage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gestage {
    get { return gestage_; }
    set {
      gestage_ = value;
    }
  }

  /// <summary>Field number for the "los" field.</summary>
  public const int LosFieldNumber = 12;
  private int los_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Los {
    get { return los_; }
    set {
      los_ = value;
    }
  }

  /// <summary>Field number for the "hmv" field.</summary>
  public const int HmvFieldNumber = 13;
  private int hmv_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Hmv {
    get { return hmv_; }
    set {
      hmv_ = value;
    }
  }

  /// <summary>Field number for the "bh" field.</summary>
  public const int BhFieldNumber = 14;
  private bool bh_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Bh {
    get { return bh_; }
    set {
      bh_ = value;
    }
  }

  /// <summary>Field number for the "diagnoses" field.</summary>
  public const int DiagnosesFieldNumber = 15;
  private static readonly pb::FieldCodec<global::PatientCase.Types.Diagnosis> _repeated_diagnoses_codec
      = pb::FieldCodec.ForMessage(122, global::PatientCase.Types.Diagnosis.Parser);
  private readonly pbc::RepeatedField<global::PatientCase.Types.Diagnosis> diagnoses_ = new pbc::RepeatedField<global::PatientCase.Types.Diagnosis>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PatientCase.Types.Diagnosis> Diagnoses {
    get { return diagnoses_; }
  }

  /// <summary>Field number for the "procedures" field.</summary>
  public const int ProceduresFieldNumber = 16;
  private static readonly pb::FieldCodec<global::PatientCase.Types.Procedure> _repeated_procedures_codec
      = pb::FieldCodec.ForMessage(130, global::PatientCase.Types.Procedure.Parser);
  private readonly pbc::RepeatedField<global::PatientCase.Types.Procedure> procedures_ = new pbc::RepeatedField<global::PatientCase.Types.Procedure>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PatientCase.Types.Procedure> Procedures {
    get { return procedures_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PatientCase);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PatientCase other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (AgeYears != other.AgeYears) return false;
    if (AgeDays != other.AgeDays) return false;
    if (BirthDate != other.BirthDate) return false;
    if (AdmDate != other.AdmDate) return false;
    if (SepDate != other.SepDate) return false;
    if (LeaveDays != other.LeaveDays) return false;
    if (Sex != other.Sex) return false;
    if (Adm != other.Adm) return false;
    if (Sep != other.Sep) return false;
    if (Gestage != other.Gestage) return false;
    if (Los != other.Los) return false;
    if (Hmv != other.Hmv) return false;
    if (Bh != other.Bh) return false;
    if(!diagnoses_.Equals(other.diagnoses_)) return false;
    if(!procedures_.Equals(other.procedures_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (AgeYears != 0) hash ^= AgeYears.GetHashCode();
    if (AgeDays != 0) hash ^= AgeDays.GetHashCode();
    if (BirthDate != 0) hash ^= BirthDate.GetHashCode();
    if (AdmDate != 0) hash ^= AdmDate.GetHashCode();
    if (SepDate != 0) hash ^= SepDate.GetHashCode();
    if (LeaveDays != 0) hash ^= LeaveDays.GetHashCode();
    if (Sex.Length != 0) hash ^= Sex.GetHashCode();
    if (Adm.Length != 0) hash ^= Adm.GetHashCode();
    if (Sep.Length != 0) hash ^= Sep.GetHashCode();
    if (Gestage != 0) hash ^= Gestage.GetHashCode();
    if (Los != 0) hash ^= Los.GetHashCode();
    if (Hmv != 0) hash ^= Hmv.GetHashCode();
    if (Bh != false) hash ^= Bh.GetHashCode();
    hash ^= diagnoses_.GetHashCode();
    hash ^= procedures_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (AgeYears != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(AgeYears);
    }
    if (AgeDays != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(AgeDays);
    }
    if (BirthDate != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(BirthDate);
    }
    if (AdmDate != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(AdmDate);
    }
    if (SepDate != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(SepDate);
    }
    if (LeaveDays != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(LeaveDays);
    }
    if (Sex.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Sex);
    }
    if (Adm.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Adm);
    }
    if (Sep.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Sep);
    }
    if (Gestage != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Gestage);
    }
    if (Los != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(Los);
    }
    if (Hmv != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(Hmv);
    }
    if (Bh != false) {
      output.WriteRawTag(112);
      output.WriteBool(Bh);
    }
    diagnoses_.WriteTo(output, _repeated_diagnoses_codec);
    procedures_.WriteTo(output, _repeated_procedures_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (AgeYears != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AgeYears);
    }
    if (AgeDays != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AgeDays);
    }
    if (BirthDate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BirthDate);
    }
    if (AdmDate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AdmDate);
    }
    if (SepDate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SepDate);
    }
    if (LeaveDays != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaveDays);
    }
    if (Sex.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Sex);
    }
    if (Adm.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Adm);
    }
    if (Sep.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Sep);
    }
    if (Gestage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gestage);
    }
    if (Los != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Los);
    }
    if (Hmv != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hmv);
    }
    if (Bh != false) {
      size += 1 + 1;
    }
    size += diagnoses_.CalculateSize(_repeated_diagnoses_codec);
    size += procedures_.CalculateSize(_repeated_procedures_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PatientCase other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.AgeYears != 0) {
      AgeYears = other.AgeYears;
    }
    if (other.AgeDays != 0) {
      AgeDays = other.AgeDays;
    }
    if (other.BirthDate != 0) {
      BirthDate = other.BirthDate;
    }
    if (other.AdmDate != 0) {
      AdmDate = other.AdmDate;
    }
    if (other.SepDate != 0) {
      SepDate = other.SepDate;
    }
    if (other.LeaveDays != 0) {
      LeaveDays = other.LeaveDays;
    }
    if (other.Sex.Length != 0) {
      Sex = other.Sex;
    }
    if (other.Adm.Length != 0) {
      Adm = other.Adm;
    }
    if (other.Sep.Length != 0) {
      Sep = other.Sep;
    }
    if (other.Gestage != 0) {
      Gestage = other.Gestage;
    }
    if (other.Los != 0) {
      Los = other.Los;
    }
    if (other.Hmv != 0) {
      Hmv = other.Hmv;
    }
    if (other.Bh != false) {
      Bh = other.Bh;
    }
    diagnoses_.Add(other.diagnoses_);
    procedures_.Add(other.procedures_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 16: {
          AgeYears = input.ReadInt32();
          break;
        }
        case 24: {
          AgeDays = input.ReadInt32();
          break;
        }
        case 32: {
          BirthDate = input.ReadUInt32();
          break;
        }
        case 40: {
          AdmDate = input.ReadUInt32();
          break;
        }
        case 48: {
          SepDate = input.ReadUInt32();
          break;
        }
        case 56: {
          LeaveDays = input.ReadInt32();
          break;
        }
        case 66: {
          Sex = input.ReadString();
          break;
        }
        case 74: {
          Adm = input.ReadString();
          break;
        }
        case 82: {
          Sep = input.ReadString();
          break;
        }
        case 88: {
          Gestage = input.ReadInt32();
          break;
        }
        case 96: {
          Los = input.ReadInt32();
          break;
        }
        case 104: {
          Hmv = input.ReadInt32();
          break;
        }
        case 112: {
          Bh = input.ReadBool();
          break;
        }
        case 122: {
          diagnoses_.AddEntriesFrom(input, _repeated_diagnoses_codec);
          break;
        }
        case 130: {
          procedures_.AddEntriesFrom(input, _repeated_procedures_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the PatientCase message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class Diagnosis : pb::IMessage<Diagnosis> {
      private static readonly pb::MessageParser<Diagnosis> _parser = new pb::MessageParser<Diagnosis>(() => new Diagnosis());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Diagnosis> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::PatientCase.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Diagnosis() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Diagnosis(Diagnosis other) : this() {
        code_ = other.code_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Diagnosis Clone() {
        return new Diagnosis(this);
      }

      /// <summary>Field number for the "code" field.</summary>
      public const int CodeFieldNumber = 1;
      private string code_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Code {
        get { return code_; }
        set {
          code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Diagnosis);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Diagnosis other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Code != other.Code) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Code.Length != 0) hash ^= Code.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Code.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Code);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Code.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Diagnosis other) {
        if (other == null) {
          return;
        }
        if (other.Code.Length != 0) {
          Code = other.Code;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Code = input.ReadString();
              break;
            }
          }
        }
      }

    }

    public sealed partial class Procedure : pb::IMessage<Procedure> {
      private static readonly pb::MessageParser<Procedure> _parser = new pb::MessageParser<Procedure>(() => new Procedure());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Procedure> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::PatientCase.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Procedure() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Procedure(Procedure other) : this() {
        code_ = other.code_;
        date_ = other.date_;
        side_ = other.side_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Procedure Clone() {
        return new Procedure(this);
      }

      /// <summary>Field number for the "code" field.</summary>
      public const int CodeFieldNumber = 1;
      private string code_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Code {
        get { return code_; }
        set {
          code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "date" field.</summary>
      public const int DateFieldNumber = 2;
      private int date_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Date {
        get { return date_; }
        set {
          date_ = value;
        }
      }

      /// <summary>Field number for the "side" field.</summary>
      public const int SideFieldNumber = 3;
      private global::PatientCase.Types.Procedure.Types.Side side_ = global::PatientCase.Types.Procedure.Types.Side.L;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::PatientCase.Types.Procedure.Types.Side Side {
        get { return side_; }
        set {
          side_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Procedure);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Procedure other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Code != other.Code) return false;
        if (Date != other.Date) return false;
        if (Side != other.Side) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Code.Length != 0) hash ^= Code.GetHashCode();
        if (Date != 0) hash ^= Date.GetHashCode();
        if (Side != global::PatientCase.Types.Procedure.Types.Side.L) hash ^= Side.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Code.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Code);
        }
        if (Date != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(Date);
        }
        if (Side != global::PatientCase.Types.Procedure.Types.Side.L) {
          output.WriteRawTag(24);
          output.WriteEnum((int) Side);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Code.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
        }
        if (Date != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Date);
        }
        if (Side != global::PatientCase.Types.Procedure.Types.Side.L) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Procedure other) {
        if (other == null) {
          return;
        }
        if (other.Code.Length != 0) {
          Code = other.Code;
        }
        if (other.Date != 0) {
          Date = other.Date;
        }
        if (other.Side != global::PatientCase.Types.Procedure.Types.Side.L) {
          Side = other.Side;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Code = input.ReadString();
              break;
            }
            case 16: {
              Date = input.ReadInt32();
              break;
            }
            case 24: {
              Side = (global::PatientCase.Types.Procedure.Types.Side) input.ReadEnum();
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Procedure message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        public enum Side {
          [pbr::OriginalName("L")] L = 0,
          [pbr::OriginalName("R")] R = 1,
          [pbr::OriginalName("B")] B = 2,
        }

      }
      #endregion

    }

  }
  #endregion

}

public sealed partial class Result : pb::IMessage<Result> {
  private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Result> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PcReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Result() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Result(Result other) : this() {
    drg_ = other.drg_;
    mdc_ = other.mdc_;
    pccl_ = other.pccl_;
    gst_ = other.gst_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Result Clone() {
    return new Result(this);
  }

  /// <summary>Field number for the "drg" field.</summary>
  public const int DrgFieldNumber = 1;
  private string drg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Drg {
    get { return drg_; }
    set {
      drg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "mdc" field.</summary>
  public const int MdcFieldNumber = 2;
  private string mdc_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Mdc {
    get { return mdc_; }
    set {
      mdc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pccl" field.</summary>
  public const int PcclFieldNumber = 3;
  private uint pccl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Pccl {
    get { return pccl_; }
    set {
      pccl_ = value;
    }
  }

  /// <summary>Field number for the "gst" field.</summary>
  public const int GstFieldNumber = 4;
  private uint gst_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Gst {
    get { return gst_; }
    set {
      gst_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Result);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Result other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Drg != other.Drg) return false;
    if (Mdc != other.Mdc) return false;
    if (Pccl != other.Pccl) return false;
    if (Gst != other.Gst) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Drg.Length != 0) hash ^= Drg.GetHashCode();
    if (Mdc.Length != 0) hash ^= Mdc.GetHashCode();
    if (Pccl != 0) hash ^= Pccl.GetHashCode();
    if (Gst != 0) hash ^= Gst.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Drg.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Drg);
    }
    if (Mdc.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Mdc);
    }
    if (Pccl != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Pccl);
    }
    if (Gst != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Gst);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Drg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Drg);
    }
    if (Mdc.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Mdc);
    }
    if (Pccl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pccl);
    }
    if (Gst != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gst);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Result other) {
    if (other == null) {
      return;
    }
    if (other.Drg.Length != 0) {
      Drg = other.Drg;
    }
    if (other.Mdc.Length != 0) {
      Mdc = other.Mdc;
    }
    if (other.Pccl != 0) {
      Pccl = other.Pccl;
    }
    if (other.Gst != 0) {
      Gst = other.Gst;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Drg = input.ReadString();
          break;
        }
        case 18: {
          Mdc = input.ReadString();
          break;
        }
        case 24: {
          Pccl = input.ReadUInt32();
          break;
        }
        case 32: {
          Gst = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
