// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/pc.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct PatientCase {
    // message fields
    pub id: ::std::string::String,
    pub ageYears: i32,
    pub ageDays: i32,
    pub birthDate: u32,
    pub admDate: u32,
    pub sepDate: u32,
    pub leaveDays: i32,
    pub sex: ::std::string::String,
    pub adm: ::std::string::String,
    pub sep: ::std::string::String,
    pub gestage: i32,
    pub los: i32,
    pub hmv: i32,
    pub bh: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PatientCase {
    fn default() -> &'a PatientCase {
        <PatientCase as ::protobuf::Message>::default_instance()
    }
}

impl PatientCase {
    pub fn new() -> PatientCase {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // int32 ageYears = 2;


    pub fn get_ageYears(&self) -> i32 {
        self.ageYears
    }
    pub fn clear_ageYears(&mut self) {
        self.ageYears = 0;
    }

    // Param is passed by value, moved
    pub fn set_ageYears(&mut self, v: i32) {
        self.ageYears = v;
    }

    // int32 ageDays = 3;


    pub fn get_ageDays(&self) -> i32 {
        self.ageDays
    }
    pub fn clear_ageDays(&mut self) {
        self.ageDays = 0;
    }

    // Param is passed by value, moved
    pub fn set_ageDays(&mut self, v: i32) {
        self.ageDays = v;
    }

    // uint32 birthDate = 4;


    pub fn get_birthDate(&self) -> u32 {
        self.birthDate
    }
    pub fn clear_birthDate(&mut self) {
        self.birthDate = 0;
    }

    // Param is passed by value, moved
    pub fn set_birthDate(&mut self, v: u32) {
        self.birthDate = v;
    }

    // uint32 admDate = 5;


    pub fn get_admDate(&self) -> u32 {
        self.admDate
    }
    pub fn clear_admDate(&mut self) {
        self.admDate = 0;
    }

    // Param is passed by value, moved
    pub fn set_admDate(&mut self, v: u32) {
        self.admDate = v;
    }

    // uint32 sepDate = 6;


    pub fn get_sepDate(&self) -> u32 {
        self.sepDate
    }
    pub fn clear_sepDate(&mut self) {
        self.sepDate = 0;
    }

    // Param is passed by value, moved
    pub fn set_sepDate(&mut self, v: u32) {
        self.sepDate = v;
    }

    // int32 leaveDays = 7;


    pub fn get_leaveDays(&self) -> i32 {
        self.leaveDays
    }
    pub fn clear_leaveDays(&mut self) {
        self.leaveDays = 0;
    }

    // Param is passed by value, moved
    pub fn set_leaveDays(&mut self, v: i32) {
        self.leaveDays = v;
    }

    // string sex = 8;


    pub fn get_sex(&self) -> &str {
        &self.sex
    }
    pub fn clear_sex(&mut self) {
        self.sex.clear();
    }

    // Param is passed by value, moved
    pub fn set_sex(&mut self, v: ::std::string::String) {
        self.sex = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sex(&mut self) -> &mut ::std::string::String {
        &mut self.sex
    }

    // Take field
    pub fn take_sex(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sex, ::std::string::String::new())
    }

    // string adm = 9;


    pub fn get_adm(&self) -> &str {
        &self.adm
    }
    pub fn clear_adm(&mut self) {
        self.adm.clear();
    }

    // Param is passed by value, moved
    pub fn set_adm(&mut self, v: ::std::string::String) {
        self.adm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adm(&mut self) -> &mut ::std::string::String {
        &mut self.adm
    }

    // Take field
    pub fn take_adm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.adm, ::std::string::String::new())
    }

    // string sep = 10;


    pub fn get_sep(&self) -> &str {
        &self.sep
    }
    pub fn clear_sep(&mut self) {
        self.sep.clear();
    }

    // Param is passed by value, moved
    pub fn set_sep(&mut self, v: ::std::string::String) {
        self.sep = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sep(&mut self) -> &mut ::std::string::String {
        &mut self.sep
    }

    // Take field
    pub fn take_sep(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sep, ::std::string::String::new())
    }

    // int32 gestage = 11;


    pub fn get_gestage(&self) -> i32 {
        self.gestage
    }
    pub fn clear_gestage(&mut self) {
        self.gestage = 0;
    }

    // Param is passed by value, moved
    pub fn set_gestage(&mut self, v: i32) {
        self.gestage = v;
    }

    // int32 los = 12;


    pub fn get_los(&self) -> i32 {
        self.los
    }
    pub fn clear_los(&mut self) {
        self.los = 0;
    }

    // Param is passed by value, moved
    pub fn set_los(&mut self, v: i32) {
        self.los = v;
    }

    // int32 hmv = 13;


    pub fn get_hmv(&self) -> i32 {
        self.hmv
    }
    pub fn clear_hmv(&mut self) {
        self.hmv = 0;
    }

    // Param is passed by value, moved
    pub fn set_hmv(&mut self, v: i32) {
        self.hmv = v;
    }

    // bool bh = 14;


    pub fn get_bh(&self) -> bool {
        self.bh
    }
    pub fn clear_bh(&mut self) {
        self.bh = false;
    }

    // Param is passed by value, moved
    pub fn set_bh(&mut self, v: bool) {
        self.bh = v;
    }
}

impl ::protobuf::Message for PatientCase {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.ageYears = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.ageDays = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.birthDate = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.admDate = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sepDate = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.leaveDays = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sex)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.adm)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sep)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.gestage = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.los = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.hmv = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.bh = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.ageYears != 0 {
            my_size += ::protobuf::rt::value_size(2, self.ageYears, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ageDays != 0 {
            my_size += ::protobuf::rt::value_size(3, self.ageDays, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.birthDate != 0 {
            my_size += ::protobuf::rt::value_size(4, self.birthDate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.admDate != 0 {
            my_size += ::protobuf::rt::value_size(5, self.admDate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sepDate != 0 {
            my_size += ::protobuf::rt::value_size(6, self.sepDate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.leaveDays != 0 {
            my_size += ::protobuf::rt::value_size(7, self.leaveDays, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sex.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.sex);
        }
        if !self.adm.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.adm);
        }
        if !self.sep.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.sep);
        }
        if self.gestage != 0 {
            my_size += ::protobuf::rt::value_size(11, self.gestage, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.los != 0 {
            my_size += ::protobuf::rt::value_size(12, self.los, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hmv != 0 {
            my_size += ::protobuf::rt::value_size(13, self.hmv, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bh != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.ageYears != 0 {
            os.write_int32(2, self.ageYears)?;
        }
        if self.ageDays != 0 {
            os.write_int32(3, self.ageDays)?;
        }
        if self.birthDate != 0 {
            os.write_uint32(4, self.birthDate)?;
        }
        if self.admDate != 0 {
            os.write_uint32(5, self.admDate)?;
        }
        if self.sepDate != 0 {
            os.write_uint32(6, self.sepDate)?;
        }
        if self.leaveDays != 0 {
            os.write_int32(7, self.leaveDays)?;
        }
        if !self.sex.is_empty() {
            os.write_string(8, &self.sex)?;
        }
        if !self.adm.is_empty() {
            os.write_string(9, &self.adm)?;
        }
        if !self.sep.is_empty() {
            os.write_string(10, &self.sep)?;
        }
        if self.gestage != 0 {
            os.write_int32(11, self.gestage)?;
        }
        if self.los != 0 {
            os.write_int32(12, self.los)?;
        }
        if self.hmv != 0 {
            os.write_int32(13, self.hmv)?;
        }
        if self.bh != false {
            os.write_bool(14, self.bh)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PatientCase {
        PatientCase::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &PatientCase| { &m.id },
                |m: &mut PatientCase| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "ageYears",
                |m: &PatientCase| { &m.ageYears },
                |m: &mut PatientCase| { &mut m.ageYears },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "ageDays",
                |m: &PatientCase| { &m.ageDays },
                |m: &mut PatientCase| { &mut m.ageDays },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "birthDate",
                |m: &PatientCase| { &m.birthDate },
                |m: &mut PatientCase| { &mut m.birthDate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "admDate",
                |m: &PatientCase| { &m.admDate },
                |m: &mut PatientCase| { &mut m.admDate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sepDate",
                |m: &PatientCase| { &m.sepDate },
                |m: &mut PatientCase| { &mut m.sepDate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "leaveDays",
                |m: &PatientCase| { &m.leaveDays },
                |m: &mut PatientCase| { &mut m.leaveDays },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sex",
                |m: &PatientCase| { &m.sex },
                |m: &mut PatientCase| { &mut m.sex },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "adm",
                |m: &PatientCase| { &m.adm },
                |m: &mut PatientCase| { &mut m.adm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sep",
                |m: &PatientCase| { &m.sep },
                |m: &mut PatientCase| { &mut m.sep },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "gestage",
                |m: &PatientCase| { &m.gestage },
                |m: &mut PatientCase| { &mut m.gestage },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "los",
                |m: &PatientCase| { &m.los },
                |m: &mut PatientCase| { &mut m.los },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "hmv",
                |m: &PatientCase| { &m.hmv },
                |m: &mut PatientCase| { &mut m.hmv },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "bh",
                |m: &PatientCase| { &m.bh },
                |m: &mut PatientCase| { &mut m.bh },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PatientCase>(
                "PatientCase",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PatientCase {
        static instance: ::protobuf::rt::LazyV2<PatientCase> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PatientCase::new)
    }
}

impl ::protobuf::Clear for PatientCase {
    fn clear(&mut self) {
        self.id.clear();
        self.ageYears = 0;
        self.ageDays = 0;
        self.birthDate = 0;
        self.admDate = 0;
        self.sepDate = 0;
        self.leaveDays = 0;
        self.sex.clear();
        self.adm.clear();
        self.sep.clear();
        self.gestage = 0;
        self.los = 0;
        self.hmv = 0;
        self.bh = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PatientCase {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PatientCase {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Result {
    // message fields
    pub drg: ::std::string::String,
    pub mdc: ::std::string::String,
    pub pccl: u32,
    pub gst: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Result {
    fn default() -> &'a Result {
        <Result as ::protobuf::Message>::default_instance()
    }
}

impl Result {
    pub fn new() -> Result {
        ::std::default::Default::default()
    }

    // string drg = 1;


    pub fn get_drg(&self) -> &str {
        &self.drg
    }
    pub fn clear_drg(&mut self) {
        self.drg.clear();
    }

    // Param is passed by value, moved
    pub fn set_drg(&mut self, v: ::std::string::String) {
        self.drg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_drg(&mut self) -> &mut ::std::string::String {
        &mut self.drg
    }

    // Take field
    pub fn take_drg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.drg, ::std::string::String::new())
    }

    // string mdc = 2;


    pub fn get_mdc(&self) -> &str {
        &self.mdc
    }
    pub fn clear_mdc(&mut self) {
        self.mdc.clear();
    }

    // Param is passed by value, moved
    pub fn set_mdc(&mut self, v: ::std::string::String) {
        self.mdc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mdc(&mut self) -> &mut ::std::string::String {
        &mut self.mdc
    }

    // Take field
    pub fn take_mdc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mdc, ::std::string::String::new())
    }

    // uint32 pccl = 3;


    pub fn get_pccl(&self) -> u32 {
        self.pccl
    }
    pub fn clear_pccl(&mut self) {
        self.pccl = 0;
    }

    // Param is passed by value, moved
    pub fn set_pccl(&mut self, v: u32) {
        self.pccl = v;
    }

    // uint32 gst = 4;


    pub fn get_gst(&self) -> u32 {
        self.gst
    }
    pub fn clear_gst(&mut self) {
        self.gst = 0;
    }

    // Param is passed by value, moved
    pub fn set_gst(&mut self, v: u32) {
        self.gst = v;
    }
}

impl ::protobuf::Message for Result {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.drg)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mdc)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.pccl = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gst = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.drg.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.drg);
        }
        if !self.mdc.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.mdc);
        }
        if self.pccl != 0 {
            my_size += ::protobuf::rt::value_size(3, self.pccl, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gst != 0 {
            my_size += ::protobuf::rt::value_size(4, self.gst, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.drg.is_empty() {
            os.write_string(1, &self.drg)?;
        }
        if !self.mdc.is_empty() {
            os.write_string(2, &self.mdc)?;
        }
        if self.pccl != 0 {
            os.write_uint32(3, self.pccl)?;
        }
        if self.gst != 0 {
            os.write_uint32(4, self.gst)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Result {
        Result::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "drg",
                |m: &Result| { &m.drg },
                |m: &mut Result| { &mut m.drg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mdc",
                |m: &Result| { &m.mdc },
                |m: &mut Result| { &mut m.mdc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "pccl",
                |m: &Result| { &m.pccl },
                |m: &mut Result| { &mut m.pccl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "gst",
                |m: &Result| { &m.gst },
                |m: &mut Result| { &mut m.gst },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Result>(
                "Result",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Result {
        static instance: ::protobuf::rt::LazyV2<Result> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Result::new)
    }
}

impl ::protobuf::Clear for Result {
    fn clear(&mut self) {
        self.drg.clear();
        self.mdc.clear();
        self.pccl = 0;
        self.gst = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Result {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Result {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fprotos/pc.proto\"\xc7\x02\n\x0bPatientCase\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\tR\x02id\x12\x1a\n\x08ageYears\x18\x02\x20\x01(\x05R\x08ageYea\
    rs\x12\x18\n\x07ageDays\x18\x03\x20\x01(\x05R\x07ageDays\x12\x1c\n\tbirt\
    hDate\x18\x04\x20\x01(\rR\tbirthDate\x12\x18\n\x07admDate\x18\x05\x20\
    \x01(\rR\x07admDate\x12\x18\n\x07sepDate\x18\x06\x20\x01(\rR\x07sepDate\
    \x12\x1c\n\tleaveDays\x18\x07\x20\x01(\x05R\tleaveDays\x12\x10\n\x03sex\
    \x18\x08\x20\x01(\tR\x03sex\x12\x10\n\x03adm\x18\t\x20\x01(\tR\x03adm\
    \x12\x10\n\x03sep\x18\n\x20\x01(\tR\x03sep\x12\x18\n\x07gestage\x18\x0b\
    \x20\x01(\x05R\x07gestage\x12\x10\n\x03los\x18\x0c\x20\x01(\x05R\x03los\
    \x12\x10\n\x03hmv\x18\r\x20\x01(\x05R\x03hmv\x12\x0e\n\x02bh\x18\x0e\x20\
    \x01(\x08R\x02bh\"R\n\x06Result\x12\x10\n\x03drg\x18\x01\x20\x01(\tR\x03\
    drg\x12\x10\n\x03mdc\x18\x02\x20\x01(\tR\x03mdc\x12\x12\n\x04pccl\x18\
    \x03\x20\x01(\rR\x04pccl\x12\x10\n\x03gst\x18\x04\x20\x01(\rR\x03gstb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
